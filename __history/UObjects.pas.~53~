{*******************************************************}
{       OBJECTS LIBRARY                                 }
{       Lab №2. Dynamic Lists                           }
{       Copyright (c) 2018 BSUIR                        }
{       Created by Parnkratiew Alexandr                 }
{                                                       }
{*******************************************************}
unit UObjects;

interface
uses
  Vcl.Forms,Vcl.Grids, Vcl.Graphics,Vcl.Dialogs, Vcl.StdCtrls;
type
  { *** СПИСОК ОБЪЕКТОВ НАЧАЛО *** }
  TObjInfo = record    // Блок информации
    obType:string[30];  // Тип объекта
    Workers:integer;    // Минимальное количество рабочих
    MatCost:Currency;   // Стоимость материалов
  end;
  TObjAdr = ^TObjList; // Ссылка на Список Объектов
  TObjList = record    // Список Объектов
    Info: TObjInfo;
    Adr: TObjAdr;
  end;
  { *** СПИСОК ОБЪЕКТОВ КОНЕЦ  *** }

// ПРОЦЕДУРЫ И ФУНКЦИИ
procedure getCBBObjectsList(CBB: TComboBox; const head: TObjAdr);
procedure readObjFile(const head:TObjAdr);
procedure saveObjFile(const head:TObjAdr);
procedure removeObjList(var head:TObjAdr; const el:string);
procedure insertObjList(const head: TObjAdr; tp:string = '1 Float House'; wk:integer = 0; mc:Currency = 0);
procedure writeObjList(Grid:TStringGrid; const head:TObjAdr);
function ObjAdrOf(head: TObjAdr; name: string):TObjAdr;
procedure editObjList(head:TObjAdr; name:string; newname:string; newwork: integer; newmoney: Currency );
procedure searchObjList(head:TObjAdr;Grid:TStringGrid;obj:string; minwork: integer; money: Currency; n1:integer);

implementation
uses
 System.SysUtils;

const
    ObjFile = 'objects.brakh'; // Файл объектов

{ Функция ObjAdrOf возвращает адрес элемента списка с нужным полем name
  Если значение не найдено, возвращается nil }
function ObjAdrOf(head: TObjAdr; name: string):TObjAdr;
var
  temp: TObjAdr;
begin

  temp := head;
  Result := nil;
  while(temp <> nil) do
  begin
    //ShowMessage(name + ' / ' + temp^.Info.obType);
    if temp^.Info.obType = name then
      Result:=temp;
    temp := temp^.Adr;
  end;
end;

{ Процедура readObjFile читает  типизированный файл, если его нет, создает его
и заполняет список объектов из файла }

procedure readObjFile(const head:TObjAdr);
var
  f: file of TObjInfo;
  OTemp: TObjAdr;
begin
  AssignFile(f, ObjFile);
  if fileExists(ObjFile) then
  begin
    Reset(f);
    //Writeln('Read file ' + ObjFile);
    OTemp := Head;
    head^.Adr := nil;
    while not EOF(f) do
    begin
      new(OTemp^.adr);
      OTemp:=OTemp^.adr;
      OTemp^.adr:=nil;
      read(f, OTemp^.Info);
      //OTemp^.Info

    end;
    close(f);
  end
  else
  begin
    Rewrite(f);
    //Writeln('Create File');
    close(f);
  end;

end;

{ Сохранения списка в типизированный файл }
procedure saveObjFile(const head:TObjAdr);
var
  f: file of TObjInfo;
  temp: TObjAdr;
begin
  AssignFile(f, ObjFile);
  rewrite(f);
  temp := head^.adr;
  while temp <> nil do
  begin
    write(f, temp^.Info);
    temp:=temp^.adr;
  end;
  close(F);
end;

{ Вставка элемента в конец списка}
procedure insertObjList(const head: TObjAdr; tp:string = '1 Float House'; wk:integer = 0; mc:Currency = 0);
var
  temp:TObjAdr;
begin
  temp := head;
  while temp^.adr <> nil do
  begin
    temp := temp^.adr;
  end;
  new(temp^.adr);
  temp:=temp^.adr;
  temp^.adr:=nil;
  temp^.Info.obType := tp;
  temp^.Info.Workers := wk;
  temp^.Info.MatCost := mc;
end;

procedure writeObjList(Grid:TStringGrid; const head:TObjAdr);
var
  temp:TObjAdr;
begin
  Grid.ColCount := 4;
  Grid.RowCount := 2;
  Grid.Font.Color:= clWhite;
  Grid.Cells[0,0] := 'Тип объекта';
  Grid.Cells[1,0] := 'Мин. кол-во рабочих';
  Grid.Cells[2,0] := 'Стоимость материалов';
  Grid.Font.Color:= clBlack;
  //ShowMessage('kek');
  temp := head^.adr;
  while temp <> nil do
  begin
    Grid.Cells[0,Grid.RowCount - 1] := temp^.INFO.obType;
    Grid.Cells[1,Grid.RowCount - 1] := IntToStr(temp^.INFO.Workers);
    Grid.Cells[2,Grid.RowCount - 1] := CurrToStr(temp^.INFO.MatCost);
    Grid.Cells[3,Grid.RowCount - 1] := 'Удалить';
    temp:=temp^.adr;
    Grid.RowCount := Grid.RowCount + 1;
  end;
  Grid.RowCount := Grid.RowCount - 1;
end;

procedure getCBBObjectsList(CBB: TComboBox; const head: TObjAdr);
var
  temp:TObjAdr;
begin
  CBB.Clear;
  CBB.Text := 'Выбрать объект';
  temp := head^.adr;
  while temp <> nil do
  begin
    CBB.Items.Add(temp^.Info.obType);
    temp:=temp^.adr;
  end;
end;

procedure removeObjList(var head:TObjAdr; const el:string);
var
  temp,temp2:TObjAdr;
begin
  temp := head;
  while temp^.adr <> nil do
  begin
    temp2 := temp^.adr;
    if temp2^.Info.obType = el then
    begin
      temp^.adr := temp2^.adr;
      dispose(temp2);
    end
    else
      temp:= temp^.adr;
  end;
end;

procedure editObjList(head:TObjAdr; name:string; newname:string; newwork: integer; newmoney: Currency );
var
  temp:TObjAdr;
begin
  temp:= head;
  while temp <> nil do
  begin
    if temp.Info.obType = name then
    begin
      temp.Info.obType := newname;
      temp.Info.Workers := newwork;
      temp.Info.MatCost := newmoney;
      exit;
    end;
    temp := temp^.Adr;
  end;
end;

procedure searchObjList(head:TObjAdr;Grid:TStringGrid;obj:string; minwork: integer; money: Currency; n1:integer);
var
  b1,b2,b3:Boolean;
  temp:TObjAdr;
begin
  Grid.ColCount := 4;
  Grid.RowCount := 2;
  Grid.Cells[0,0] := 'Тип объекта';
  Grid.Cells[1,0] := 'Мин. кол-во рабочих';
  Grid.Cells[2,0] := 'Стоимость материалов';
  temp:=head;
  while temp <> nil do
  begin
    if obj = '' then
      b1 := true
    else
    begin
      if n1 = 0 then
        b1 := temp^.Info.obType = obj
      else
      begin
        b1 := Pos(obj,temp^.Info.obType) > 0;
      end;

    end;
    if minwork = -1 then
      b2 := True
    else
      b2 := temp^.Info.Workers = minwork;
    if money = -1 then
      b3:= True
    else
      b3 := temp^.Info.MatCost = money;

    if b1 and b2 and b3 then
    begin
      Grid.Cells[0,Grid.RowCount - 1] := temp^.INFO.obType;
      Grid.Cells[1,Grid.RowCount - 1] := IntToStr(temp^.INFO.Workers);
      Grid.Cells[2,Grid.RowCount - 1] := CurrToStr(temp^.INFO.MatCost);
      Grid.Cells[3,Grid.RowCount - 1] := 'Удалить';
      Grid.RowCount := Grid.RowCount + 1;
    end;

    temp:= temp^.Adr;
  end;
  Grid.RowCount := Grid.RowCount - 1;
end;

end.
