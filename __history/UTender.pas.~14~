unit UTender;

interface
uses System.SysUtils, UObjects, UContractors, UWorkers;

type
  TTenderInfo =
  record
    Company: string[30];
    Money: Currency;
    Workers: Integer;
  end;
  TTendAdr = ^TTenderList;
  TTenderList = record
    info: TTenderInfo;
    adr: TTendAdr;
  end;
procedure newTender(var TendHead:TTendAdr; const OHead: TObjAdr;const ContHead: TContrAdr; const obj: string);
procedure writeTendList(const head:TTendAdr);

implementation

procedure newTender(var TendHead:TTendAdr; const OHead: TObjAdr;const ContHead: TContrAdr; const obj: string);
var
  ContTemp: TContrAdr;
  TendTemp: TTendAdr;
  OTemp :  TObjAdr;
  WorkTemp: TWorkAdr;
  Workers:integer;
  Money:Currency;
begin
  Otemp := ObjAdrOf(OHead, obj);
  if (Otemp <> nil) then
  begin
    New(TendHead);
    Writeln('1');
    TendHead^.adr := nil;
    TendTemp := TendHead;
     Writeln('2');
    ContTemp := ContHead;
    while ContTemp <> nil do
    begin
      WorkTemp := ContTemp^.WorkersHead;

      Money:= 0;
      Workers := 0;
      while WorkTemp <> nil do
      begin
        Writeln('kek');
        Writeln(WorkTemp^.Info.ObjType);

        if WorkTemp^.Info.ObjType = obj then
        begin
          Inc(Workers);
          Money := money + WorkTemp^.Info.Salary;
        end;
        if Workers <> 0 then
        begin
          New(TendTemp.adr);
          Writeln('5');
          TendTemp := TendTemp^.adr;
          TendTemp^.adr := nil;
          TendTemp^.info.Money := money + OTemp.Info.MatCost;
          TendTemp^.info.Workers := Workers;
        end;
        WorkTemp := WorkTemp^.Adr;
      end;
      ContTemp:= ContTemp^.adr;
    end;

  end
  else
  begin
    writeln('Object not found');
  end;
end;

procedure writeTendList(const head:TTendAdr);
var
  temp:TTendAdr;
begin
  Writeln('write tender list');
  temp := head^.adr;
  while temp <> nil do
  begin
    writeln(temp^.info.Company);
    writeln(temp^.INFO.Workers);
    writeln(CurrToStr(temp^.INFO.Money));
    temp:=temp^.adr;
  end;
end;

end.
