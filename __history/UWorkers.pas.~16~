unit UWorkers;

interface
type
 {  ***** СПИСОК РАБОЧИХ НАЧАЛО ***** }
    TWorkersInfo = record    // Блок информации
      Name: string[30];        // ФИО Рабочего
      Company: string[30];     // Компания, в которой он работает (Подрядчик)
      Salary:Currency;         // Зарплата
      ObjType: string[30];     // Тип объекта, которым он может заниматься
    end;
    TWorkAdr = ^TWorkersList;// Ссылка на список рабочих
    TWorkersList = record    // Список рабочих
      Info: TWorkersInfo;      // Блок информации
      Adr: TWorkAdr;           // Адрес след элемент списка
    end;
    {  ***** СПИСОК РАБОЧИХ КОНЕЦ ***** }

// ПРОЦЕДУРЫ И ФУНКЦИИ
procedure writeWorkList(const head:TWorkAdr);
procedure readFromFileWithContractors(const head: TWorkAdr; contr: string);

implementation
  uses UContractors, System.SysUtils;
  const
    WorkFile = 'workers.brakh';

procedure readFromFileWithContractors(const head: TWorkAdr; contr: string);
var
  f: file of TWorkersInfo;
  Temp: TWorkAdr;
  TInfo: TWorkersInfo;
begin
  AssignFile(f, WorkFile);
  if fileExists(WorkFile) then
  begin
    Reset(f);
    Writeln('Read file ' + WorkFile);
    Temp := Head;
    while not EOF(f) do
    begin
      read(f, TInfo);
      if (TInfo.Company = contr) then
      begin
        new(Temp^.adr);
        Temp:=Temp^.adr;
        Temp^.adr:=nil;
        Temp^.Info := TInfo;
      end;
    end;

    close(f);
  end
  else
  begin
    Rewrite(f);
    Writeln('Create File');
    close(f);
  end;
end;

procedure insertWorkList(const head: TWorkAdr; company:string; Name:string;
        Salary: Currency; ObjType: string;);
begin

end;

procedure writeWorkList(const head:TWorkAdr);
var
  temp:TWorkAdr;
begin
  temp := head^.adr;
  while temp <> nil do
  begin
    writeln(temp^.INFO.Name);
    writeln(temp^.INFO.Salary);
    writeln(temp^.INFO.ObjType);
    temp:=temp^.adr;
  end;
end;
end.
