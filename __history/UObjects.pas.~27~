{*******************************************************}
{       OBJECTS LIBRARY                                 }
{       Lab №2. Dynamic Lists                           }
{       Copyright (c) 2018 BSUIR                        }
{       Created by Parnkratiew Alexandr                 }
{                                                       }
{*******************************************************}
unit UObjects;

interface
uses
  Vcl.Forms,Vcl.Grids, Vcl.Graphics,Vcl.Dialogs;
type
  { *** СПИСОК ОБЪЕКТОВ НАЧАЛО *** }
  TObjInfo = record    // Блок информации
    obType:string[30];  // Тип объекта
    Workers:integer;    // Минимальное количество рабочих
    MatCost:Currency;   // Стоимость материалов
  end;
  TObjAdr = ^TObjList; // Ссылка на Список Объектов
  TObjList = record    // Список Объектов
    Info: TObjInfo;
    Adr: TObjAdr;
  end;
  { *** СПИСОК ОБЪЕКТОВ КОНЕЦ  *** }

// ПРОЦЕДУРЫ И ФУНКЦИИ

procedure readObjFile(const head:TObjAdr);
procedure saveObjFile(const head:TObjAdr);
procedure insertObjList(const head: TObjAdr; tp:string = '1 Float House'; wk:integer = 0; mc:Currency = 0);
procedure writeObjList(Grid:TStringGrid; const head:TObjAdr);
function ObjAdrOf(head: TObjAdr; name: string):TObjAdr;

implementation
uses
 System.SysUtils;

const
    ObjFile = 'objects.brakh'; // Файл объектов

{ Функция ObjAdrOf возвращает адрес элемента списка с нужным полем name
  Если значение не найдено, возвращается nil }
function ObjAdrOf(head: TObjAdr; name: string):TObjAdr;
var
  temp: TObjAdr;
begin
  ShowMessage(name);
  temp := head;
  Result := nil;
  while(temp <> nil) do
  begin
    if temp^.Info.obType = name then
      Result:=temp;
    temp := temp^.Adr;
  end;
end;

{ Процедура readObjFile читает  типизированный файл, если его нет, создает его
и заполняет список объектов из файла }

procedure readObjFile(const head:TObjAdr);
var
  f: file of TObjInfo;
  OTemp: TObjAdr;
begin
  AssignFile(f, ObjFile);
  if fileExists(ObjFile) then
  begin
    Reset(f);
    //Writeln('Read file ' + ObjFile);
    OTemp := Head;
    while not EOF(f) do
    begin
      new(OTemp^.adr);
      OTemp:=OTemp^.adr;
      OTemp^.adr:=nil;
      read(f, OTemp^.Info);
      //OTemp^.Info

    end;
    close(f);
  end
  else
  begin
    Rewrite(f);
    //Writeln('Create File');
    close(f);
  end;

end;

{ Сохранения списка в типизированный файл }
procedure saveObjFile(const head:TObjAdr);
var
  f: file of TObjInfo;
  temp: TObjAdr;
begin
  AssignFile(f, ObjFile);
  rewrite(f);
  temp := head^.adr;
  while temp <> nil do
  begin
    write(f, temp^.Info);
    temp:=temp^.adr;
  end;
  close(F);
end;

{ Вставка элемента в конец списка}
procedure insertObjList(const head: TObjAdr; tp:string = '1 Float House'; wk:integer = 0; mc:Currency = 0);
var
  temp:TObjAdr;
begin
  temp := head;
  while temp^.adr <> nil do
  begin
    temp := temp^.adr;
  end;
  new(temp^.adr);
  temp:=temp^.adr;
  temp^.adr:=nil;
  temp^.Info.obType := tp;
  temp^.Info.Workers := wk;
  temp^.Info.MatCost := mc;
end;

procedure writeObjList(Grid:TStringGrid; const head:TObjAdr);
var
  temp:TObjAdr;
begin
  Grid.ColCount := 3;
  Grid.RowCount := 2;
  Grid.Font.Color:= clWhite;
  Grid.Cells[0,0] := 'Тип объекта';
  Grid.Cells[1,0] := 'Мин. кол-во рабочих';
  Grid.Cells[2,0] := 'Стоимость материалов';
  Grid.Font.Color:= clBlack;
  //ShowMessage('kek');
  temp := head^.adr;
  while temp <> nil do
  begin
    Grid.Cells[0,Grid.RowCount - 1] := temp^.INFO.obType;
    Grid.Cells[1,Grid.RowCount - 1] := IntToStr(temp^.INFO.Workers);
    Grid.Cells[2,Grid.RowCount - 1] := CurrToStr(temp^.INFO.MatCost) + ' $';
    temp:=temp^.adr;
    Grid.RowCount := Grid.RowCount + 1;
  end;
  Grid.RowCount := Grid.RowCount - 1;
end;

end.
