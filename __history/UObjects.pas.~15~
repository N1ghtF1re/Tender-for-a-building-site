{*******************************************************}
{       OBJECTS LIBRARY                                 }
{       Lab №2. Dynamic Lists                           }
{       Copyright (c) 2018 BSUIR                        }
{       Created by Parnkratiew Alexandr                 }
{                                                       }
{*******************************************************}
unit UObjects;

interface
type
  { *** СПИСОК ОБЪЕКТОВ НАЧАЛО *** }
  TObjInfo = record    // Блок информации
    obType:string[30];  // Тип объекта
    Workers:integer;    // Минимальное количество рабочих
    MatCost:Currency;   // Стоимость материалов
  end;
  TObjAdr = ^TObjList; // Ссылка на Список Объектов
  TObjList = record    // Список Объектов
    Info: TObjInfo;
    Adr: TObjAdr;
  end;
  { *** СПИСОК ОБЪЕКТОВ КОНЕЦ  *** }

// ПРОЦЕДУРЫ И ФУНКЦИИ

procedure readObjFile(const head:TObjAdr);
procedure saveObjFile(const head:TObjAdr);
procedure insertObjList(const head: TObjAdr; tp:string = '1 Float House'; wk:integer = 0; mc:Currency = 0);
procedure writeObjList(const head:TObjAdr);
function ObjAdrOf(head: TObjAdr; name: string):TObjAdr;

implementation
uses
  System.SysUtils;
const
    ObjFile = 'objects.brakh'; // Файл объектов

function ObjAdrOf(head: TObjAdr; name: string):TObjAdr;
var
  temp: TObjAdr;
begin
  temp := head;
  Result := nil;
  while(temp <> nil) do
  begin
    if temp^.Info.obType = name then
      Result:=temp;
    temp := temp^.Adr;
  end;
end;

procedure readObjFile(const head:TObjAdr);
var
  f: file of TObjInfo;
  OTemp: TObjAdr;
begin
  AssignFile(f, ObjFile);
  if fileExists(ObjFile) then
  begin
    Reset(f);
    Writeln('Read file ' + ObjFile);
    OTemp := Head;
    while not EOF(f) do
    begin
      new(OTemp^.adr);
      OTemp:=OTemp^.adr;
      OTemp^.adr:=nil;
      read(f, OTemp^.Info);
      //OTemp^.Info

    end;
    close(f);
  end
  else
  begin
    Rewrite(f);
    Writeln('Create File');
    close(f);
  end;

end;
procedure saveObjFile(const head:TObjAdr);
var
  f: file of TObjInfo;
  temp: TObjAdr;
begin
  AssignFile(f, ObjFile);
  rewrite(f);
  temp := head^.adr;
  while temp <> nil do
  begin
    write(f, temp^.Info);
    temp:=temp^.adr;
  end;
  close(F);
end;
procedure insertObjList(const head: TObjAdr; tp:string = '1 Float House'; wk:integer = 0; mc:Currency = 0);
var
  temp:TObjAdr;
begin
  temp := head;
  while temp^.adr <> nil do
  begin
    temp := temp^.adr;
  end;
  new(temp^.adr);
  temp:=temp^.adr;
  temp^.adr:=nil;
  temp^.Info.obType := tp;
  temp^.Info.Workers := wk;
  temp^.Info.MatCost := mc;
end;
procedure writeObjList(const head:TObjAdr);
var
  temp:TObjAdr;
begin
  temp := head^.adr;
  while temp <> nil do
  begin
    writeln(temp^.INFO.obType);
    writeln(temp^.INFO.Workers);
    writeln(CurrToStr(temp^.INFO.MatCost));
    temp:=temp^.adr;
  end;
end;

end.
